/** Create Nav List
* @param {Alignment} $align (center) - Text Alignment
*/
@mixin navlist($align: center) {
  list-style: none;
  margin: 0;
  padding: 0;
  text-align: $align;
}

/** Create Nav List LI element
* @param {Alignment} $align (center) - Text Alignment
*/
@mixin navlist__li($align: center) {
  display: inline-block;
  text-align: $align;
}

/**
* Generate Title with Shadows
* @param {Number} $font-size (95px) - Target font size
* @param {Number} $line-height (145px) - Target line height
* @param {Color} $color (graytones(cool, two)) - Font Color
* @param {Color} $shadow-1 (transparent) - Inner Shadow Color
* @param {Color} $shadow-2 (transparent) - Shadow Color
* @requires $title
*/
@mixin title($font-size: 95px, $line-height: 145px, $color: graytones(cool, two), $shadow-1: transparent, $shadow-2: transparent) {
  font-weight: 800;
  font-size: $font-size;
  line-height: $line-height;
  font-family: $title;
  text-transform: uppercase;
  color: $color;
  @if $shadow-2 {
    text-shadow: 2px 2px 0 $shadow-1, 4px 4px 0 $shadow-2;
  }
}

/**
* Maintain element aspect ratio
* @param {Number} $ratio (1 1) - Aspect Ratio
*/
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));

  width: $width;
  height: 0;
  padding-bottom: $height;
}

@mixin text-overlay() {
  position: relative;
  & > *{
    position: relative;
  }
  &:before{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,.35));
  }
}

/**
* ##Respond To Breakpoints
* Loop through the breakpoints to find the match
* @output The media query with proper min-width value
* @example
* .element {
*   color: hotpink;
*   @include respond-to(small) {
*     color: tomato;
*   }
* }
* @throws Error Warning
*/
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
    + "Please make sure it is defined in `$breakpoints` map.";
  }
}

/**
* Button
* @access public
* @param {Color} $font - font color
* @param {Color} $bg - background color
* @todo change lighten & darken to tint & shade
* @requires graytone
*/
@mixin button($font, $bg) {
  border-radius: 10px;
  background: $bg;
  color: tint($font, 10%);
  box-shadow: 0 4px shade($bg, 20%);
  text-shadow: 0 -1px shade($font, 80%);
}

/// Helper to clear inner floats
/// @author Nicolas Gallagher
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Helper to size an element
/// @author Hugo Giraudel
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}
